#!/usr/bin/env bash
shopt -s extglob
shopt -s nullglob

# This is necessary since this script is sometimes sourced from
# subshells that don't have the variables from bin/compile.
# Remove this once we no longer wrap all the things in `sub_env`.
BIN_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
ROOT_DIR=$(dirname "${BIN_DIR}")
# shellcheck source=vendor/buildpack-stdlib_v8.sh
source "${ROOT_DIR}/vendor/buildpack-stdlib_v8.sh"

if [ "$(uname)" == Darwin ]; then
    sed() { command sed -l "$@"; }
else
    sed() { command sed -u "$@"; }
fi

# Syntax sugar.
indent() {
  sed "s/^/       /"
}


# Clean up pip output
cleanup() {
  sed -e 's/\.\.\.\+/.../g' | sed -e '/already satisfied/Id' | sed -e '/No files were found to uninstall/Id' | sed -e '/Overwriting/Id' | sed -e '/python executable/Id' | sed -e '/no previously-included files/Id'
}

# Buildpack Steps.
puts-step() {
  echo "-----> $*"
}

# Buildpack Warnings.
puts-warn() {
  echo " !     $*"
}

# Does some serious copying.
deep-cp() {
  declare source="$1" target="$2"

  mkdir -p "$target"

  # cp doesn't like being called without source params,
  # so make sure they expand to something first.
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s nullglob dotglob
    set -- "$source"/!(tmp|.|..)
    [[ $# == 0 ]] || cp -a "$@" "$target"
  )
}

# Measure the size of the Python installation.
measure-size() {
  echo "$(du -s .heroku/python 2>/dev/null || echo 0) | awk '{print $1}')"
}

is_module_available() {
  # Returns 0 if the specified module exists, otherwise returns 1.
  # Uses pkgutil rather than pkg_resources or pip's CLI, since pkgutil exists
  # in the stdlib, and doesn't depend on the choice of package manager.
  local module_name="${1}"
  python -c "import sys, pkgutil; sys.exit(0 if pkgutil.find_loader('${module_name}') else 1)"
}


function print {
  echo -e "[$1] \e[1m$2\e[0m"
}

function print_info {
  print "\e[1;96mINFO\e[0m" "$1"
}

function print_ok {
  print "\e[1;92mOK\e[0m" "$1"
}

function print_error {
  print "\e[1;91mERROR\e[0m" "$1"
}

function op {
  local fail

  print_info "$1" 
  if eval "$2"; then
    print_ok "$3" 
    if [ -n "$OP_OK" ]; then
      eval "$OP_OK"
      unset OP_OK
    fi
  else
    print_error "$4: $!" 
    if [ -n "$OP_ERR" ]; then
      eval "$OP_ERR"
      unset OP_ERR
    fi
    fail=true
  fi

  if [ -n "$OP_FINAL" ]; then
    print_info "Running final hook: $OP_FINAL"
    eval "$OP_FINAL"
    unset OP_FINAL
  fi

  if [[ $fail = true ]]; then 
    exit 1
  fi
}
